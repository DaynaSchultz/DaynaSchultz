BiocManager::install("clusterProfiler")
BiocManager::install("org.HS.eg.db")
BiocManager::install("org.Dr.eg.db")
BiocManager::install("reactome.db")
#BiocManager::install("RDAVIDWebService", url)

BiocManager::install("enrichplot")
BiocManager::install("pathview")
BiocManager::install("topGO")
BiocManager::install("ggnewscale")
BiocManager::install("ggridges")
BiocManager::install("ggtree")
BiocManager::install("ComplexHeatmap")
BiocManager::install("circlize")
BiocManager::install("cluster")


library(ggnewscale)
library(Biobase)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Dr.eg.db)
library(reactome.db)
library(stringi)
library(tibble)
library(enrichplot)
library(pathview)
library(RDAVIDWebService)
library(topGO)
library(DOSE)
library(ggridges)
library(ggjoy)
library(ggtree)
library(RColorBrewer)
library(gplots)
library(ComplexHeatmap)
library(circlize)
library(cluster)


################ clusterProfiler GO & KEGG & vis ##########################
# Extract genes from data sets
geneList1 <- topTable(fit3, coef = 2, number = Inf)

#Remove unneeded columns
geneList1 <- geneList1 %>% 
  select(AveExpr, SystematicName, logFC) %>%
  as.data.frame() 

#save gene list from significant DEGs and all
genes1 <- probeset.listCD$SystematicName
genes2 <- geneList1$SystematicName

#clusterProfiler
#translate genes
#some won't map, likely because they're predicted
#http://www.bioconductor.org/packages/3.2/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html#supported-organisms
eg.sig = bitr(genes1, fromType = "ACCNUM", toType = "ENTREZID", OrgDb = "org.Hs.eg.db")

eg.all = bitr(genes2, fromType = "ACCNUM", toType = "ENTREZID", OrgDb = "org.Hs.eg.db") 


#Set up the files 
eg.sig2 <- as.data.frame(eg.sig)
geneList1 <- left_join(eg.sig2, geneList1, by = c("ACCNUM" = "SystematicName"))

eg.all2 <- as.data.frame(eg.all)
EntrezID <- make.unique(eg.all2$ENTREZID, sep = "-")
EntrezID <- as.data.frame(EntrezID)
eg.all3 <- eg.all2 %>% 
  add_column(EntrezID) %>% 
  select(ACCNUM, EntrezID)

geneList2 <- left_join(eg.all3, geneList1, by = "ACCNUM")


#get logFC values and sort for GSEA
geneList2 <- geneList2 %>% 
  select(EntrezID, logFC)
#rownames(geneList2) <- geneList2[,1]

#geneList3 <- geneList2 %>% 
#  select(logFC) %>% 
#  arrange(desc(logFC))

#geneList

geneList4 = geneList2[,2]
names(geneList4) = as.character(geneList2[,1])
geneList4 = sort(geneList4, decreasing = TRUE)
#geneList5 <- as_tibble(geneList3)




#GO analysis classification
ggo <- groupGO(gene = eg.sig$ENTREZID,
               OrgDb = "org.Hs.eg.db",
               ont = c("BP", "CC", "MF"), #Molecular function (MF), biological process (BP), cellular component (CC)
               readable = TRUE,
               level = 3)

head(summary(ggo))

ggoplot <- barplot(ggo, drop = TRUE, showCategory = 25)


#GO over-representation test
ego <- enrichGO(gene = eg.sig$ENTREZID,
                OrgDb = "org.Hs.eg.db",
                ont = "ALL",
                pAdjustMethod = "BH",
                pvalueCutoff  = 0.01,
                qvalueCutoff  = 0.05,
                readable      = TRUE)

head(summary(ego))

egoplot <- barplot(ego, showCategory = 25)

### Visualization
#https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
#http://bioconductor.org/packages/release/bioc/manuals/enrichplot/man/enrichplot.pdf

dotplot(ego, showCategory=10, split=".sign")
egodot <- dotplot(ego)


enrichMap(ego)

cnetplot(ego, catgorySize = "pvalue", foldChange = geneList4, showCategory = 3)

plotGOgraph(ego)



#GO GSEA
#https://guangchuangyu.github.io/2015/05/use-clusterprofiler-as-an-universal-enrichment-analysis-tool/
gse <- gseDO(geneList = geneList4,
              minGSSize    = 1,
              eps = 0,
              pvalueCutoff = 0.05,
              verbose      = FALSE)

#warning about "package:stats" can be ignored
head(gse)

#Check the gene set enrichment score
gseaplot(gse, geneSetID = 100)

#Ridgeplot
#Grouped by gene set, density plots are generated by using the frequency of fold change values per 
#gene within each set. Helpful to interpret up/down-regulated pathways.
ridgeplot(gse) + labs(x = "Enrichment Distribution")

tr <- rtree(30)

# create simple ggtree object with tip labels
p <- ggtree(tr) + geom_tiplab(offset = 0.02)
d1 <- data.frame(id=tr$tip.label, location=sample(c("GZ", "HK", "CZ"), 30, replace=TRUE)) 
p1 <- p %<+% d1 + geom_tippoint(aes(color=location)) 
d2 <- data.frame(id=tr$tip.label, val=rnorm(30, sd=3)) 
p2 <- facet_plot(p1, panel="dot", data=d2, geom=geom_point, aes(x=val), color='firebrick') + theme_tree2()



#mapping or something
#see: http://bioconductor.org/packages/release/bioc/manuals/enrichplot/man/enrichplot.pdf
#list of significant genes as EntrezIDs
genes11 <- geneList1$ENTREZID

de <- enrichDO(genes11)
de2 <- pairwise_termsim(de)

#plot linkages of genes and enriched concepts (e.g. GO categories, KEGG pathways)
# Category Netplot
#The cnetplot depicts the linkages of genes and biological concepts (e.g. GO terms or KEGG pathways) 
#as a network (helpful to see which genes are involved in enriched pathways and genes that may belong 
#to multiple annotation categories).
cnetplot(de2, showCategory = 10)

dotplot(de)

heatplot(de)
barplot(de)


#Enrichment map organizes enriched terms into a network with edges connecting overlapping gene sets. 
#In this way, mutually overlapping gene sets are tend to cluster together, making it easy to identify 
#functional modules.
emapplot(de2)





#KEGG over-representation test
kk <- enrichKEGG(gene = genes1,
                 organism = "org.Hs.eg.db",
                 pvalueCutoff = 0.05, 
                 use_internal_data = TRUE)
head(summary(kk))


#DAVID functional analysis
david <- enrichDAVID(gene = genes1,
                     idType = "ENTREZ_GENE_ID",
                     annotation = "KEGG_PATHWAY",
                     david.user = "clusterProfiler@hku.hk")

############ goana in limma ####################
CA_DEGs <- left_join(eg, probeset.list.CA, by = c("ACCNUM" = "SystematicName"))

CA_DEGs <- CA_DEGs %>% 
  select("ENTREZID", "logFC", "AveExpr", "t", "P.Value", "adj.P.Val", "B")

GO <- goana(geneList1$ENTREZID, universe = NULL, species = "Hs", prior.prob = NULL, covariate = NULL,
      plot = TRUE)
GO <- GO %>% 
  filter(GO$P.DE < 0.051)

topGO(GO, n = 20, truncate = "50")
topGO(GO, n = 20, truncate = "50")



KEGG <- kegga(geneList1$ENTREZID, universe = NULL, species = "Hs", prior.prob = NULL, covariate = NULL,
      plot = TRUE)

topKEGG(KEGG, number = 20, truncate.path = "50")

####################### Other ##############################
BiocManager::install("pvclust")
BiocManager::install("reshape")


library(pvclust)
library(reshape)


violinMatrix <- reshape2::melt(x.bgcorrect.norm.ave.filt$E)

colnames(violinMatrix) <- c("Gene", "Sample", "Expression")

ggplot(violinMatrix, aes(x=Sample, y=Expression)) +
  geom_violin() +
  theme(axis.text.x = element_text(angle=45, hjust=1))


#------------------------------------------------------


pv <- pvclust(x.bgcorrect.norm.ave.filt$E, method.dist= "euclidean", method.hclust = "ward.D2", nboot = 100)

plot(pv)


######################### Heatmap #################################

xhm1 <- x.bgcorrect.norm.ave.filt$E %>% 
  as.data.frame() %>% 
  rownames_to_column()

xhm2 <-x.bgcorrect.norm.ave.filt$genes %>% 
  as.data.frame()

xhm <- full_join(xhm1, xhm2, by = c("rowname" = "SystematicName"))

deg <- xhm[,1:9]

degs <- left_join(eg.all3, deg, by = c("ACCNUM" = "rowname"))
degs1 <- degs %>% 
  column_to_rownames("EntrezID")

degs2 <- data.matrix(degs1[,2:9])

#heatmap(degs2)

 heat <- t(scale(t(degs2)))



myCol <- colorRampPalette(c("violet", "black", "springgreen"))(100)
myBreaks <- seq(-3, 3, length.out=101)



#Euclidean distance; Ward's linkage
par(mar=c(1,1,1,1), cex=1.0)


heatmap.2(heat,
          col=myCol,
          breaks=myBreaks,
          main="",
          key=T, key.xlab="Expresssion\nZ-score", keysize=1.0,
          scale="none",
          ColSideColors=c("yellow", "yellow", "royalblue","royalblue","royalblue","pink","pink","pink"),
          density.info="none",
          reorderfun=function(d,w) reorder(d, w, agglo.FUN=mean), 
          trace="none",
          cexRow=1.0, cexCol=1.0,
          distfun=function(x) dist(x, method="euclidean"),
          hclustfun=function(x) hclust(x, method="ward.D2"),
          margins=c(6, 6))
legend("top",
       bty="n",
       cex=1.0,
       title="Treatment",
       c("Control", "Amiodarone", "DEHP"), fill=c("yellow", "royalblue", "pink"),
       horiz=TRUE)


#1 - Pearson correlation distance; Ward's linkage
par(mar=c(1,1,1,1), cex=1.0)
heatmap.2(heat,
          col=myCol,
          breaks=myBreaks,
          main="",
          key=T, key.xlab="Expresssion\nZ-score", keysize=1.0,
          scale="none",
          ColSideColors=c("yellow", "yellow", "royalblue","royalblue","royalblue","pink","pink","pink"),
          density.info="none",
          reorderfun=function(d,w) reorder(d, w, agglo.FUN=mean),
          trace="none",
          cexRow=1.0, cexCol=1.0,
          distfun=function(x) as.dist(1-cor(t(x))),
          hclustfun=function(x) hclust(x, method="ward.D2"),
          margins=c(10, 20))
legend("top",
       bty="n",
       cex=1.0,
       title="Treatment",
       c("Control", "Amiodarone", "DEHP"), fill=c("yellow", "royalblue", "pink"),
       horiz=TRUE)



##### Complex Heatmap ####
ColAnn <- data.frame(Treatment)
colnames(ColAnn) <- c("Treatment")
ColAnn <- HeatmapAnnotation(df=ColAnn,
                            which="col",
                            col=list(Treatment=c("Control"="yellow", "Amiodarone"="royalblue", "DEHP" = "pink")))

#Boxplots for rows (genes) and columns (samples)
boxAnnCol <- HeatmapAnnotation(
  boxplot=anno_boxplot(heat,
                       border=FALSE,
                       gp=gpar(fill="#CCCCCC"),
                       lim=NULL,
                       pch=".",
                       size=unit(2, "mm"),
                       axis=FALSE),
  annotation_width=unit(c(1, 7.5), "cm"))
boxAnnRow <- rowAnnotation(
  boxplot=row_anno_boxplot(heat,
                           border=FALSE,
                           gp=gpar(fill="#CCCCCC"),
                           lim=NULL,
                           pch=".",
                           size=unit(3, "cm"),
                           axis=FALSE),
  annotation_width=unit(c(3), "cm"))

myCol <- colorRampPalette(c("violet", "black", "springgreen"))(100)
myBreaks <- seq(-3, 3, length.out=100)

hmap <- Heatmap(heat,
                name="Expression Z-score",
                col=colorRamp2(myBreaks, myCol),
                heatmap_legend_param=list(
                  color_bar="continuous",
                  legend_direction="horizontal",
                  legend_width=unit(5,"cm"),
                  title_position="topcenter",
                  title_gp=gpar(fontsize=15, fontface="bold")),
                
                #Row annotation configurations
                cluster_rows=TRUE,
                show_row_dend=TRUE,
                row_title="Gene",
                row_title_side="left",
                row_title_gp=gpar(fontsize=16, fontface="bold"),
                row_title_rot=90,
                show_row_names=TRUE,
                row_names_side="left",
                row_names_gp=gpar(fontsize=10),
                
                #Column annotation configuratiions
                cluster_columns=TRUE,
                show_column_dend=TRUE,
                column_title="Samples",
                column_title_side="top",
                column_title_gp=gpar(fontsize=16, fontface="bold"),
                column_title_rot=0,
                show_column_names=TRUE,
                column_names_gp=gpar(fontsize=14),
                
                #Dendrogram configurations: columns
                clustering_distance_columns=function(x) as.dist(1-cor(t(x))),
                clustering_method_columns="ward.D2",
                column_dend_height=unit(30,"mm"),
                
                #Dendrogram configurations: rows
                clustering_distance_rows=function(x) as.dist(1-cor(t(x))),
                clustering_method_rows="ward.D2",
                row_dend_width=unit(30,"mm"))
                
                #Annotations (row annotation must be added with 'draw' function, below)
                #top_annotation_height=unit(0.5,"cm"),
                #top_annotation=ColAnn,
                
                #bottom_annotation_height=unit(3, "cm"),
                #bottom_annotation=boxAnnCol)

draw(hmap + boxAnnRow, heatmap_legend_side="left", annotation_legend_side="right")

